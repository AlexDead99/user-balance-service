// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: orders.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "ordersDetails" (
   transfer_id, product_id, amount
) VALUES (
    $1, $2, $3
) RETURNING order_id, transfer_id, product_id, amount, created_at
`

type CreateOrderParams struct {
	TransferID int32 `json:"transfer_id"`
	ProductID  int32 `json:"product_id"`
	Amount     int32 `json:"amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (OrdersDetails, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.TransferID, arg.ProductID, arg.Amount)
	var i OrdersDetails
	err := row.Scan(
		&i.OrderID,
		&i.TransferID,
		&i.ProductID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "ordersDetails"
WHERE order_id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, orderID int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, orderID)
	return err
}

const listOrders = `-- name: ListOrders :many
SELECT order_id, transfer_id, product_id, amount, created_at FROM "ordersDetails"
WHERE transfer_id = $1
`

func (q *Queries) ListOrders(ctx context.Context, transferID int32) ([]OrdersDetails, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, transferID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersDetails
	for rows.Next() {
		var i OrdersDetails
		if err := rows.Scan(
			&i.OrderID,
			&i.TransferID,
			&i.ProductID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
