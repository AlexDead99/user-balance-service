// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
   user_id, service_id, total_price, description, status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING transfer_id, user_id, service_id, total_price, created_at, description, status
`

type CreateTransferParams struct {
	UserID      int32   `json:"user_id"`
	ServiceID   int32   `json:"service_id"`
	TotalPrice  float32 `json:"total_price"`
	Description string  `json:"description"`
	Status      string  `json:"status"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, createTransfer,
		arg.UserID,
		arg.ServiceID,
		arg.TotalPrice,
		arg.Description,
		arg.Status,
	)
	var i Transfers
	err := row.Scan(
		&i.TransferID,
		&i.UserID,
		&i.ServiceID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT transfer_id, user_id, service_id, total_price, created_at, description, status FROM transfers
WHERE transfer_id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, transferID int32) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, transferID)
	var i Transfers
	err := row.Scan(
		&i.TransferID,
		&i.UserID,
		&i.ServiceID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfers
  set status = $2
WHERE transfer_id = $1
RETURNING transfer_id, user_id, service_id, total_price, created_at, description, status
`

type UpdateTransferParams struct {
	TransferID int32  `json:"transfer_id"`
	Status     string `json:"status"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfers, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer, arg.TransferID, arg.Status)
	var i Transfers
	err := row.Scan(
		&i.TransferID,
		&i.UserID,
		&i.ServiceID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.Description,
		&i.Status,
	)
	return i, err
}
