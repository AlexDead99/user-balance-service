// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
   owner, balance 
) VALUES (
    $1, $2
) RETURNING account_id, owner, balance, created_at
`

type CreateAccountParams struct {
	Owner   string  `json:"owner"`
	Balance float32 `json:"balance"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, owner, balance, created_at FROM accounts
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int32) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
  set balance = $2
WHERE account_id = $1
RETURNING account_id, owner, balance, created_at
`

type UpdateAccountParams struct {
	AccountID int32   `json:"account_id"`
	Balance   float32 `json:"balance"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.AccountID, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.AccountID,
		&i.Owner,
		&i.Balance,
		&i.CreatedAt,
	)
	return i, err
}
