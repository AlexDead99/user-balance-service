// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "post": {
                "description": "Create user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Create an account",
                "parameters": [
                    {
                        "description": "user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Accounts"
                        }
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "description": "Get user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get user's account",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Accounts"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user's account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Update account's balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.UpdateUserBalanceTxResult"
                        }
                    }
                }
            }
        },
        "/transfers": {
            "put": {
                "description": "Fulfil transfer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transfers"
                ],
                "summary": "Fulfil transfer",
                "parameters": [
                    {
                        "description": "transfer",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.fulfilTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.fulfilTransferResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create transfer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transfers"
                ],
                "summary": "Create transfer",
                "parameters": [
                    {
                        "description": "transfer",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.TransferTxResult"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.createAccountRequest": {
            "type": "object",
            "required": [
                "owner"
            ],
            "properties": {
                "balance": {
                    "type": "number",
                    "minimum": 1
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "api.createTransferRequest": {
            "type": "object",
            "required": [
                "description",
                "products",
                "service_id",
                "user_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ProductsParams"
                    }
                },
                "service_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "api.fulfilTransferRequest": {
            "type": "object",
            "required": [
                "status",
                "transfer_id"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Success",
                        "Failed"
                    ]
                },
                "transfer_id": {
                    "type": "integer"
                }
            }
        },
        "api.fulfilTransferResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "api.updateAccountRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "number"
                }
            }
        },
        "db.Accounts": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "integer"
                },
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                }
            }
        },
        "db.ProductsParams": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                }
            }
        },
        "db.TransferTxResult": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                },
                "transaction_id": {
                    "type": "integer"
                }
            }
        },
        "db.UpdateUserBalanceTxResult": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Balance API",
	Description:      "This is a small user balance server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
